<?php

namespace {{namespace}};

use App\Models\{{model}}\{{model}};
use App\Repositories\BaseRepository;
use App\Exceptions\GeneralException;
use Illuminate\Database\Eloquent\Model;

class {{class}} extends BaseRepository
{
	/**
     * Associated Repository Model.
     */
    const MODEL = {{model}}::class;

    /**
     * @return mixed
     */
    public function getForDataTable() {}

{{all}}    /**
     * Get all instance of {{model}}.
     *
     * @return \Illuminate\Database\Eloquent\Collection|\{{model}}[]
     */
    public function getAll($order_by = 'id', $sort = 'asc')
    {
        return $this->query()->orderBy($order_by, $sort)->get();
    }
{{/all}}
{{paginated}}   /**
     * @param  $per_page
     * @param  string      $order_by
     * @param  string      $sort
     * @param  int         $status
     * @return mixed
     */
    public function get{{model}}sPaginated($per_page = 10, $order_by = 'id', $sort = 'asc')
    {
        return $this->query()orderBy($order_by, $sort)->paginate($per_page);
    }
{{/paginated}}
{{create}}   /**
     * Create a new instance of {{model}}.
     *
     * @param  array  $input
     * @return bool
     */
    public function create($input)
    {
        ${{variable}} = $this->create{{model}}Stub($input);

        if (!${{variable}}->save()) {

            throw new GeneralException('There was a problem creating this {{variable}}. Please try again.');
        }

        return ${{variable}};

    }
{{/create}}
{{update}}    /**
     * Update the {{model}} with the given attributes.
     *
     * @param  int    $id
     * @param  array  $input
     * @return bool|int
     */
    public function update($id, $input)
    {
        ${{variable}} = $this->findOrThrowException($id);

        if (!${{variable}}->update($input)) {
			throw new GeneralException('There was a problem updating this {{variable}}. Please try again.');
        }

        return ${{variable}};


    }
{{/update}}
{{delete}}    /**
     * @param  $id
     * @throws GeneralException
     * @return boolean|null
     */
    public function destroy($id)
    {
        ${{variable}} = $this->findOrThrowException($id);

        if (!${{variable}}->delete()) {
        	throw new GeneralException('There was a problem deleting this {{variable}}. Please try again.');
        }

        return true;

    }
{{/delete}}
    /**
     * @param  $input
     * @return mixed
     */
    private function create{{model}}Stub($input)
    {
        ${{variable}}                    = new {{model}};
        ${{variable}}->name              = $input['name'];

        return ${{variable}};
    }
}
