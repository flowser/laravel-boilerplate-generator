<?php

namespace {{namespace}};

use App\Models\{{model}}\{{model}};
use App\Repositories\BaseRepository;
use App\Exceptions\GeneralException;
use Illuminate\Database\Eloquent\Model;

class {{class}} extends BaseRepository
{
	/**
     * Associated Repository Model.
     */
    const MODEL = {{model}}::class;

    /**
     * @return mixed
     */
    public function getForDataTable()
    {
    	//
    }

{{all}}    /**
     * Get all instance of {{model}}.
     *
     * @return \Illuminate\Database\Eloquent\Collection|\{{model}}[]
     */
    public function getAll($order_by = 'id', $sort = 'asc')
    {
        return $this->query()->orderBy($order_by, $sort)->get();
    }
{{/all}}
{{paginated}}   /**
     * @param  $per_page
     * @param  string      $order_by
     * @param  string      $sort
     * @param  int         $status
     * @return mixed
     */
    public function getPaginated($trashed = false, $per_page = 15, $order_by = 'id', $sort = 'asc')
    {
    	$query = $trashed ? $this->query()->onlyTrashed() : $this->query();

        return $query->orderBy($order_by, $sort)->paginate($per_page);
    }
{{/paginated}}
{{create}}   /**
     * Create a new instance of {{model}}.
     *
     * @param  array  $input
     * @return object
     */
    public function create($input)
    {
        ${{variable}} = $this->create{{model}}Stub($input);

        if (${{variable}}->save()) {
        	// event(new {{model}}Created(${{variable}}));

        	return ${{variable}};
        }

        throw new GeneralException('There was a problem creating this {{variable}}. Please try again.');
    }
{{/create}}
{{update}}    /**
     * Update the {{model}} with the given attributes.
     *
     * @param  int    $id
     * @param  array  $input
     * @return bool|int
     */
    public function update(Model ${{variable}}, array $input)
    {
        if (${{variable}}->update($input)) {
    		//event(new {{model}}Updated(${{variable}}));

    		return ${{variable}};
    	}

        throw new GeneralException('There was a problem updating this {{variable}}. Please try again.');
    }
{{/update}}
{{delete}}    /**
     * @param  $id
     * @throws GeneralException
     * @return boolean|null
     */
    public function destroy(Model ${{variable}})
    {
        if (${{variable}}->delete()) {
            //event(new {{model}}Deleted(${{variable}}));

            return ${{variable}};
        }

        throw new GeneralException('There was a problem deleting this {{variable}}. Please try again.');
    }
{{/delete}}
{{forceDelete}}    /**
     * @param  $id
     * @throws GeneralException
     * @return boolean|null
     */
    public function delete(Model ${{variable}})
    {
        if (${{variable}}->forceDelete()) {
            //event(new {{model}}Destroyed(${{variable}}));

            return ${{variable}};
        }

        throw new GeneralException('There was a problem deleting this {{variable}}. Please try again.');
    }
{{/forceDelete}}
{{restore}}    /**
     * @param  $id
     * @throws GeneralException
     * @return boolean|null
     */
    public function restore(Model ${{variable}})
    {
        if (${{variable}}->restore()) {
            //event(new {{model}}Restored(${{variable}}));

            return ${{variable}};
        }

        throw new GeneralException('There was a problem restoring this {{variable}}. Please try again.');
    }
{{/restore}}
    /**
     * @param  $input
     * @return mixed
     */
    private function create{{model}}Stub($input)
    {
        ${{variable}} = self::MODEL;
        ${{variable}} = new ${{variable}};

        // You need to setup protected $fillable field on your model
        foreach (${{variable}}->getFillable() as $column) {
        	if (array_key_exists($column, $input)) {
        		${{variable}}->{$column} = $input[$column];
        	}
        }

        return ${{variable}};
    }
}
